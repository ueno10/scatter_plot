{"version":3,"sources":["index.js"],"names":["App","props","state","data","window","fetch","then","response","json","filter","item","word","setState","this","className","Draw","Component","dendrogramDataPath","data_j","console","log","dataPlot","xScaleD","testData","margin","width","height","color","d3","xScaleP","domain","x","range","nice","yScaleP","y","plotHeight","contentWidth","data_stratify","id","d","name","parentId","parent","stratify","root","size","cluster","descendants","transform","map","i","key","onMouseOver","style","cursor","cx","cy","r","fill","slice","dy","children","font-size","textAnchor","render","document","querySelector"],"mappings":"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","file":"static/js/main.4aa2f8e5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport * as d3 from \"d3\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n    };\n  }\n\n  componentDidMount() {\n    const dataPath = \"./data/plot_test_data_10.json\";\n    window\n      .fetch(dataPath)\n      .then((response) => response.json())\n      .then((data) => {\n        data = data.filter((item) => {\n          return (\n            item.word === \"開発\" ||\n            item.word === \"学校\" ||\n            item.word === \"支援\" ||\n            item.word === \"日本\" ||\n            item.word === \"文化\" ||\n            item.word === \"海外\"\n          );\n        });\n        this.setState({ data });\n      });\n  }\n\n  render() {\n    const { data } = this.state;\n    if (data == null) {\n      return <div>loading</div>;\n    }\n    return (\n      <div className=\"App\">\n        <Draw data={data} />\n      </div>\n    );\n  }\n}\n\nclass Draw extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: \"\",\n      data: null,\n    };\n  }\n\n  componentDidMount() {\n    const dendrogramDataPath = `./data/dendrogramData/${this.state.word}.json`;\n    window\n      .fetch(dendrogramDataPath)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ data });\n      });\n  }\n\n  render() {\n    const dendrogramDataPath = `./data/dendrogramData/${this.state.word}.json`;\n    window\n      .fetch(dendrogramDataPath)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ data });\n      });\n    const { data } = this.state;\n    const data_j = data;\n    if (data_j != null) {\n      console.log(data_j);\n    }\n\n    const dataPlot = this.props.data;\n\n    console.log(this.state);\n    const contentWidth = 1200; // 全体\n    const contentHeight = 3000; //　全体\n\n    const plotWidth = 300;\n    const plotHeight = 300;\n    const margin = {\n      left: 15,\n      right: 100,\n      top: 20,\n      bottom: 60,\n    };\n\n    const width = contentWidth + margin.left + margin.right;\n    const height = contentHeight + margin.top + margin.bottom;\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    const xScaleP = d3\n      .scaleLinear()\n      .domain([\n        d3.min(dataPlot, (item) => item.x),\n        d3.max(dataPlot, (item) => item.x),\n      ])\n      .range([0, plotWidth])\n      .nice();\n\n    const yScaleP = d3\n      .scaleLinear()\n      .domain([\n        d3.max(dataPlot, (item) => item.y),\n        d3.min(dataPlot, (item) => item.y),\n      ])\n      .range([0, plotHeight - 5])\n      .nice();\n\n    //\n    let xScaleD;\n    let testData;\n    if (data_j != null) {\n      xScaleD = d3\n        .scaleLinear()\n        .domain([\n          d3.max(data_j, (item) => item.height),\n          d3.min(data_j, (item) => item.height),\n        ])\n        .range([plotWidth + margin.left, contentWidth - 150]);\n\n      const stratify = d3\n        .stratify()\n        .id((d) => d.name)\n        .parentId((d) => d.parent);\n      const data_stratify = stratify(data_j);\n      const root = d3.hierarchy(data_stratify);\n\n      const cluster = d3\n        .cluster()\n        .size([contentHeight, contentWidth - plotWidth - margin.left - 150]);\n      cluster(root);\n\n      testData = root.descendants();\n    }\n\n    console.log(testData);\n\n    return (\n      <svg width={width} height={height}>\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          {dataPlot.map((item, i) => {\n            return (\n              <g\n                key={i}\n                onMouseOver={() => {\n                  this.setState({ word: item.word });\n                }}\n              >\n                {console.log(this.state.word)}\n                <title>{`word:${item.word}`}</title>\n                <circle\n                  style={{ cursor: \"pointer\" }}\n                  cx={xScaleP(item.x)}\n                  cy={yScaleP(item.y)}\n                  r=\"5\"\n                  fill={color(item.color)}\n                />\n              </g>\n            );\n          })}\n          {\n            <text x={plotWidth} y=\"0\">\n              {this.state.word}\n            </text>\n          }\n        </g>\n        {data_j != null ? (\n          <g transform={`translate(100, ${margin.top})`}>\n            {testData.slice(1).map((item) => {\n              return (\n                <path\n                  className=\"link\"\n                  d={`M${xScaleD(item.data.data.height)},${item.x}\n                      L${xScaleD(item.parent.data.data.height)},${item.x}\n                      L${xScaleD(item.parent.data.data.height)},${\n                    item.parent.x\n                  }`}\n                />\n              );\n            })}\n            {testData.map((item, i) => {\n              return (\n                <g\n                  key={i}\n                  transform={`translate(${xScaleD(item.data.data.height)},${\n                    item.x\n                  })`}\n                >\n                  <circle r=\"1\" fill=\"#555\"></circle>\n                  <text\n                    dy=\"5\"\n                    x={item.children ? -10 : 5}\n                    y=\"-4\"\n                    font-size=\"30%\"\n                    textAnchor={item.children ? \"end\" : \"start\"}\n                  >\n                    {item.children ? null : item.data.data[\"事業名\"]}\n                  </text>\n                </g>\n              );\n            })}\n          </g>\n        ) : (\n          <text>loading</text>\n        )}\n      </svg>\n    );\n  }\n}\n\nrender(<App />, document.querySelector(\"#content\"));\n"],"sourceRoot":""}