{"version":3,"sources":["index.js"],"names":["App","props","state","data","window","fetch","then","response","json","setState","this","className","WordPlot","Component","word","console","log","margin","width","height","color","d3","xScale","domain","item","x","range","nice","yScale","y","contentHeight","transform","ticks","map","x1","y1","x2","y2","stroke","textAnchor","i","key","onClick","style","cursor","cx","cy","r","fill","render","document","querySelector"],"mappings":"mNAIMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,KAAM,MAHS,E,gEAOE,IAAD,OAElBC,OACGC,MAFc,8BAGdC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACH,GACL,EAAKM,SAAS,CAAEN,c,+BAKZ,IACAA,EAASO,KAAKR,MAAdC,KACR,OAAY,MAARA,EACK,wCAGP,yBAAKQ,UAAU,OACb,kBAACC,EAAD,CAAUT,KAAMA,S,GA1BNU,aAgCZD,E,kDACJ,WAAYX,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXY,KAAM,IAHS,E,qDAMT,IAAD,OACDX,EAAOO,KAAKT,MAAME,KACxBY,QAAQC,IAAIb,GACZ,IAEMc,EACE,GADFA,EAGC,GAGDC,EARe,IAQQD,EAJpB,IAKHE,EARgB,IAQSF,EAHrB,GAKJG,EAAQC,IAAgBA,KAExBC,EAASD,MAEZE,OAAO,CAACF,IAAOlB,GAAM,SAACqB,GAAD,OAAUA,EAAKC,KAAIJ,IAAOlB,GAAM,SAACqB,GAAD,OAAUA,EAAKC,OACpEC,MAAM,CAAC,EAhBW,MAiBlBC,OAEGC,EAASP,MAEZE,OAAO,CAACF,IAAOlB,GAAM,SAACqB,GAAD,OAAUA,EAAKK,KAAIR,IAAOlB,GAAM,SAACqB,GAAD,OAAUA,EAAKK,OACpEH,MAAM,CAAC,EAAGI,MACVH,OAEH,OACE,yBAAKT,MAAOA,EAAOC,OAAQA,GACzB,uBAAGY,UAAS,oBAAed,EAAf,aAA+BA,EAA/B,MACTK,EAAOU,QAAQC,KAAI,SAACR,GACnB,OACE,uBAAGM,UAAS,oBAAeT,EAAOG,GAAtB,QACV,0BACES,GAAG,IACHC,GAAIL,IACJM,GAAG,IACHC,GAlCQ,IAmCRC,OAAO,UAET,0BAAMT,EAAGC,IAAoBS,WAAW,UACrCd,OAKRG,EAAOI,QAAQC,KAAI,SAACJ,GACnB,OACE,uBAAGE,UAAS,sBAAiBH,EAAOC,GAAxB,MACV,0BAAMK,GAAG,KAAKC,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,OAAO,UAC1C,0BAAMb,EAAE,MAAMI,EAAE,IAAIU,WAAW,UAC5BV,OAMP,2BACE,0BACEK,GAAG,IACHC,GAAIL,IACJM,GA3DS,IA4DTC,GAAIP,IACJQ,OAAO,UAET,0BACEJ,GAAG,IACHC,GAAIL,IACJM,GAAG,IACHC,GAAG,IACHC,OAAO,WAKZnC,EAAK8B,KAAI,SAACT,EAAMgB,GACf,OACE,uBACEC,IAAKD,EACLE,QAAS,WACP,EAAKjC,SAAS,CAAEK,KAAMU,EAAKV,SAG5BC,QAAQC,IAAI,EAAKd,MAAMY,MACxB,8CAAgBU,EAAKV,OACrB,4BACE6B,MAAO,CAAEC,OAAQ,WACjBC,GAAIvB,EAAOE,EAAKC,GAChBqB,GAAIlB,EAAOJ,EAAKK,GAChBkB,EAAE,IACFC,KAAM5B,EAAMI,EAAKJ,aAMvB,0BAAMK,EA9FO,IA8FUI,EAAE,KACtBnB,KAAKR,MAAMY,Y,GAzGHD,aAkHvBoC,iBAAO,kBAACjD,EAAD,MAASkD,SAASC,cAAc,e","file":"static/js/main.6a337ae4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { render } from \"react-dom\";\nimport * as d3 from \"d3\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: null,\n    };\n  }\n\n  componentDidMount() {\n    const dataPath = \"./data/plot_test_data.json\";\n    window\n      .fetch(dataPath)\n      .then((response) => response.json())\n      .then((data) => {\n        this.setState({ data });\n      });\n    //drawCluster();\n  }\n\n  render() {\n    const { data } = this.state;\n    if (data == null) {\n      return <div>loading</div>;\n    }\n    return (\n      <div className=\"App\">\n        <WordPlot data={data} />\n      </div>\n    );\n  }\n}\n\nclass WordPlot extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: \"\",\n    };\n  }\n  render() {\n    const data = this.props.data;\n    console.log(data);\n    const contentWidth = 500;\n    const contentHeight = 500;\n    const margin = {\n      left: 80,\n      right: 100,\n      top: 20,\n      bottom: 80,\n    };\n    const width = contentWidth + margin.left + margin.right;\n    const height = contentHeight + margin.top + margin.bottom;\n\n    const color = d3.scaleOrdinal(d3.schemeCategory10);\n\n    const xScale = d3\n      .scaleLinear()\n      .domain([d3.min(data, (item) => item.x), d3.max(data, (item) => item.x)])\n      .range([0, contentWidth])\n      .nice();\n\n    const yScale = d3\n      .scaleLinear()\n      .domain([d3.max(data, (item) => item.y), d3.min(data, (item) => item.y)])\n      .range([0, contentHeight - 5])\n      .nice();\n\n    return (\n      <svg width={width} height={height}>\n        <g transform={`translate(${margin.left}, ${margin.top})`}>\n          {xScale.ticks().map((x) => {\n            return (\n              <g transform={`translate(${xScale(x)},0)`}>\n                <line\n                  x1=\"0\"\n                  y1={contentHeight - 5}\n                  x2=\"0\"\n                  y2={contentHeight}\n                  stroke=\"black\"\n                />\n                <text y={contentHeight + 20} textAnchor=\"middle\">\n                  {x}\n                </text>\n              </g>\n            );\n          })}\n          {yScale.ticks().map((y) => {\n            return (\n              <g transform={`translate(0,${yScale(y)})`}>\n                <line x1=\"-5\" y1=\"0\" x2=\"0\" y2=\"0\" stroke=\"black\" />\n                <text x=\"-20\" y=\"5\" textAnchor=\"middle\">\n                  {y}\n                </text>\n              </g>\n            );\n          })}\n          {\n            <g>\n              <line\n                x1=\"0\"\n                y1={contentHeight - 5}\n                x2={contentWidth}\n                y2={contentHeight - 5}\n                stroke=\"black\"\n              />\n              <line\n                x1=\"0\"\n                y1={contentHeight - 5}\n                x2=\"0\"\n                y2=\"0\"\n                stroke=\"black\"\n              />\n            </g>\n          }\n\n          {data.map((item, i) => {\n            return (\n              <g\n                key={i}\n                onClick={() => {\n                  this.setState({ word: item.word });\n                }}\n              >\n                {console.log(this.state.word)}\n                <title>{`word:${item.word}`}</title>\n                <circle\n                  style={{ cursor: \"pointer\" }}\n                  cx={xScale(item.x)}\n                  cy={yScale(item.y)}\n                  r=\"5\"\n                  fill={color(item.color)}\n                />\n              </g>\n            );\n          })}\n          {\n            <text x={contentWidth} y=\"0\">\n              {this.state.word}\n            </text>\n          }\n        </g>\n      </svg>\n    );\n  }\n}\n\nrender(<App />, document.querySelector(\"#content\"));\n"],"sourceRoot":""}